package com.oybek.bridgevk;

import com.oybek.bridgevk.Entities.Geo;
import com.oybek.bridgevk.Entities.Message;
import com.oybek.bridgevk.Entities.StopInfo;

import java.util.List;
import java.util.stream.Collectors;

public class Bot {
    private enum State { TRAM, WAIT_TROLL_APPROVE }

    private Ettu ettu;
    private State state = State.TRAM;
    private Geo lastGeo = null;

    //
    Bot(Ettu ettu) {
        this.ettu = ettu;
    }

    //
    public Message getReaction(Message msg) {
        switch (state) {
            default: {
                break;
            }

            case WAIT_TROLL_APPROVE: {
                state = State.TRAM;
                if (msg.getText() != null
                        && ( msg.getText().toLowerCase().equals("–¥–∞") || msg.getText().toLowerCase().equals("lf") ) ) {
                    msg.setGeo(lastGeo);

                    // TODO: override clone method and work with clone
                    Message replyMsg = msg;

                    // get info about troll stop
                    List<StopInfo> stopInfos = ettu.getNearestTrollStops(msg.getGeo(), 2);

                    if (stopInfos == null) {
                        replyMsg.setText("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–∞—Ö üòû");
                        return replyMsg;
                    }

                    // provide information
                    replyMsg.setText(
                        stopInfos
                            .stream()
                            .map( stopInfo -> "üöé –û—Å—Ç–∞–Ω–æ–≤–∫–∞: " + stopInfo.getTextInfo() )
                            .collect(Collectors.joining("\n"))
                    );

                    return replyMsg;
                } else {
                    return getReaction(msg);
                }
            }

            case TRAM: {
                // TODO: override clone method and work with clone
                Message replyMsg = msg;

                // no geolocation provided
                if (msg.getGeo() == null) {
                    replyMsg.setText("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –≤–æ—Ç –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è:");
                    replyMsg.setAttachment("doc-163915852_464149858");
                    return replyMsg;
                }

                // get info about tram stop
                List<StopInfo> stopInfos = ettu.getNearestTramStops(msg.getGeo(), 2);

                if (stopInfos == null) {
                    replyMsg.setText("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–º–≤–∞—è—Ö üòû");
                    return replyMsg;
                }

                // provide information
                replyMsg.setText(
                        stopInfos
                                .stream()
                                .map( stopInfo -> "üöã –û—Å—Ç–∞–Ω–æ–≤–∫–∞: " + stopInfo.getTextInfo() )
                                .collect(Collectors.joining("\n"))
                );

                replyMsg.appendText("\n–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–∞–º?");
                state = State.WAIT_TROLL_APPROVE;
                lastGeo = msg.getGeo();
                return replyMsg;
            }
        }

        return null;
    }
}
